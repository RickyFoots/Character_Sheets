/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => WeatherPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var WEATHER_VIEW_TYPE = "tenki";
var DEFAULT_SETTINGS = {
  apiKey: "",
  unit: "celsius",
  refreshInterval: 30,
  location: ""
};
var WeatherPlugin = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.updateInterval = -1;
  }
  async onload() {
    this.settings = Object.assign(
      {},
      DEFAULT_SETTINGS,
      await this.loadData()
    );
    this.registerView(
      WEATHER_VIEW_TYPE,
      (leaf) => this.view = new WeatherView(leaf, this)
    );
    this.addCommand({
      id: "open",
      name: "open",
      callback: this.onShow.bind(this)
    });
    this.addCommand({
      id: "refresh",
      name: "Refresh",
      callback: () => {
        if (this.view) {
          this.view.refreshWeather();
        }
      }
    });
    this.app.workspace.onLayoutReady(async () => {
      await this.initView();
    });
    this.addSettingTab(new WeatherSettingTab(this.app, this));
  }
  onunload() {
    this.clearUpdateInterval();
  }
  onShow() {
    this.initView();
  }
  async initView() {
    if (this.app.workspace.getLeavesOfType(WEATHER_VIEW_TYPE).length) {
      return;
    }
    const leaf = this.app.workspace.getRightLeaf(false);
    if (leaf) {
      await leaf.setViewState({ type: WEATHER_VIEW_TYPE });
      this.app.workspace.revealLeaf(leaf);
      if (this.view instanceof WeatherView) {
        this.view.displayTemperature();
      } else {
        this.view = new WeatherView(leaf, this);
        this.updateInterval = window.setInterval(
          this.view.displayTemperature.bind(this.view),
          this.settings.refreshInterval * 1e3
        );
      }
    }
  }
  clearUpdateInterval() {
    if (this.updateInterval) {
      clearInterval(this.updateInterval);
      this.updateInterval = -1;
    }
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var WeatherView = class extends import_obsidian.ItemView {
  constructor(leaf, plugin) {
    super(leaf);
    this.plugin = plugin;
  }
  async onOpen() {
    this.displayTemperature();
    this.plugin.updateInterval = window.setInterval(
      () => this.displayTemperature(),
      this.plugin.settings.refreshInterval * 1e3
    );
  }
  refreshWeather() {
    this.plugin.clearUpdateInterval();
    this.plugin.view.displayTemperature();
    this.plugin.updateInterval = window.setInterval(
      () => this.plugin.view.displayTemperature(),
      this.plugin.settings.refreshInterval * 1e3
    );
    new import_obsidian.Notice("Tenki updated");
  }
  onClose() {
    this.plugin.clearUpdateInterval();
    return super.onClose();
  }
  getViewType() {
    return WEATHER_VIEW_TYPE;
  }
  getDisplayText() {
    return "Tenki";
  }
  // Return the icon for the view
  getIcon() {
    return "sun";
  }
  async fetchWeatherData() {
    const WEATHER_API_URL = `http://api.weatherapi.com/v1/forecast.json?key=${this.plugin.settings.apiKey}&q=${this.plugin.settings.location}&days=3&aqi=yes`;
    const response = await (0, import_obsidian.requestUrl)(WEATHER_API_URL);
    const weatherData = response.json;
    return weatherData;
  }
  displayTemperature() {
    this.fetchWeatherData().then((weatherData) => {
      const weatherWidget = this.createWeatherWidget(weatherData);
      this.containerEl.empty();
      this.containerEl.appendChild(weatherWidget);
    }).catch((error) => {
      console.error("Failed to fetch weather data", error);
    });
  }
  createWeatherWidget(weatherData) {
    const location = weatherData.location.name;
    const currentIcon = weatherData.current.condition.icon;
    const currentTemp = this.getTemperatureString(
      weatherData.current.temp_c,
      weatherData.current.temp_f
    );
    const feelsLikeTemp = this.getTemperatureString(
      weatherData.current.feelslike_c,
      weatherData.current.feelslike_f
    );
    const humidity = `${weatherData.current.humidity}%`;
    const uv = weatherData.current.uv.toString();
    const currentConditions = weatherData.current.condition.text;
    const forecastData = this.extractForecastData(weatherData.forecast);
    const lastUpdated = weatherData.current.last_updated;
    const weatherContainer = document.createElement("div");
    weatherContainer.className = "weather-container";
    const refreshButton = weatherContainer.createDiv(
      "tenki-refresh-button"
    );
    refreshButton.onclick = this.refreshWeather.bind(this);
    refreshButton.setAttribute("data-app-id", "tenki");
    new import_obsidian.ExtraButtonComponent(refreshButton).setIcon("refresh-ccw").setTooltip("Refresh", { placement: "top" });
    const locationDiv = document.createElement("div");
    locationDiv.className = "location";
    locationDiv.textContent = location;
    weatherContainer.appendChild(locationDiv);
    const currentContainer = document.createElement("div");
    currentContainer.className = "current-container";
    weatherContainer.appendChild(currentContainer);
    const currentIconImg = document.createElement("img");
    currentIconImg.className = "current-icon";
    currentIconImg.src = `http:${currentIcon}`;
    currentIconImg.alt = "Weather Icon";
    currentContainer.appendChild(currentIconImg);
    const currentStatsContainer = document.createElement("div");
    currentStatsContainer.className = "current-stats-container";
    currentContainer.appendChild(currentStatsContainer);
    const currentTempContainer = document.createElement("div");
    currentTempContainer.className = "current-temp-container";
    currentStatsContainer.appendChild(currentTempContainer);
    const currentTempDiv = document.createElement("div");
    currentTempDiv.className = "current-temp";
    currentTempDiv.textContent = currentTemp;
    currentTempContainer.appendChild(currentTempDiv);
    const feelsLikeTempDiv = document.createElement("div");
    feelsLikeTempDiv.className = "current-feelslike";
    feelsLikeTempDiv.textContent = feelsLikeTemp;
    currentTempContainer.appendChild(feelsLikeTempDiv);
    const humidityDiv = document.createElement("div");
    humidityDiv.className = "current-humidity";
    humidityDiv.textContent = "Humidity: ";
    currentStatsContainer.appendChild(humidityDiv);
    const humidityValueDiv = document.createElement("div");
    humidityValueDiv.className = "current-humidity-value";
    humidityValueDiv.textContent = humidity;
    humidityDiv.appendChild(humidityValueDiv);
    const uvDiv = document.createElement("div");
    uvDiv.className = "current-uv";
    uvDiv.textContent = "UV: ";
    currentStatsContainer.appendChild(uvDiv);
    const uvValueDiv = document.createElement("div");
    uvValueDiv.className = "current-uv-value";
    uvValueDiv.textContent = uv;
    uvDiv.appendChild(uvValueDiv);
    const aqDiv = document.createElement("div");
    aqDiv.className = "current-aq";
    if (weatherData.current.air_quality && weatherData.current.air_quality["us-epa-index"]) {
      const aq = weatherData.current.air_quality["us-epa-index"].toString();
      const aqText = document.createElement("span");
      aqText.textContent = "AQ: ";
      aqDiv.appendChild(aqText);
      const aqValueDiv = document.createElement("div");
      aqValueDiv.className = "current-aq-value";
      aqValueDiv.textContent = aq;
      const aqIconDiv = document.createElement("div");
      aqIconDiv.className = "current-aq-icon";
      const aqIcon = this.createIcon(aq);
      aqIconDiv.appendChild(aqIcon);
      aqDiv.appendChild(aqValueDiv);
      aqDiv.appendChild(aqIconDiv);
    }
    currentStatsContainer.appendChild(aqDiv);
    const currentConditionsDiv = document.createElement("div");
    currentConditionsDiv.className = "current-conditions";
    currentConditionsDiv.textContent = currentConditions;
    weatherContainer.appendChild(currentConditionsDiv);
    const forecastContainer = document.createElement("div");
    forecastContainer.className = "forecast-container";
    weatherContainer.appendChild(forecastContainer);
    forecastData.forEach((forecast) => {
      const forecastDayContainer = document.createElement("div");
      forecastDayContainer.className = "forecast-day-container";
      forecastContainer.appendChild(forecastDayContainer);
      const forecastDayDiv = document.createElement("div");
      forecastDayDiv.className = "forecast-day";
      const forecastDate = new Date(forecast.day);
      const today = new Date();
      const month = forecastDate.toLocaleString(void 0, {
        month: "short"
      });
      const day = forecastDate.getDate().toString();
      const forecastDateFormatted = forecastDate.getDate() === today.getDate() && forecastDate.getMonth() === today.getMonth() && forecastDate.getFullYear() === today.getFullYear() ? "Today" : `${month} ${day}`;
      forecastDayDiv.textContent = forecastDateFormatted;
      forecastDayContainer.appendChild(forecastDayDiv);
      const forecastIconImg = document.createElement("img");
      forecastIconImg.className = "forecast-icon";
      forecastIconImg.src = `http:${forecast.icon}`;
      forecastIconImg.alt = "Weather Icon";
      forecastDayContainer.appendChild(forecastIconImg);
      const forecastRainDiv = document.createElement("div");
      forecastRainDiv.className = "forecast-rain";
      forecastRainDiv.textContent = forecast.rain;
      forecastDayContainer.appendChild(forecastRainDiv);
      const tooltip = document.createElement("div");
      tooltip.className = "forecast-tooltip";
      if (this.plugin.settings.unit === "celsius") {
        tooltip.textContent = `${forecast.minTempC}\xB0C ${forecast.maxTempC}\xB0C`;
      } else {
        tooltip.textContent = `${forecast.minTempF}\xB0F ${forecast.maxTempF}\xB0F`;
      }
      forecastDayContainer.appendChild(tooltip);
      forecastDayContainer.addEventListener("mouseover", () => {
        tooltip.style.visibility = "visible";
      });
      forecastDayContainer.addEventListener("mouseout", () => {
        tooltip.style.visibility = "hidden";
      });
    });
    const lastUpdatedDiv = document.createElement("div");
    lastUpdatedDiv.className = "last-updated";
    lastUpdatedDiv.textContent = "Source Updated: " + lastUpdated;
    weatherContainer.appendChild(lastUpdatedDiv);
    return weatherContainer;
  }
  getTemperatureString(celsius, fahrenheit) {
    if (this.plugin.settings.unit === "celsius") {
      return `${celsius}\xB0C`;
    } else {
      return `${fahrenheit}\xB0F`;
    }
  }
  extractForecastData(forecast) {
    if (!forecast)
      return [];
    return forecast.forecastday.map((forecastDay) => ({
      day: forecastDay.date,
      icon: forecastDay.day.condition.icon,
      rain: `${forecastDay.day.daily_chance_of_rain}%`,
      minTempC: `${forecastDay.day.mintemp_c}`,
      maxTempC: `${forecastDay.day.maxtemp_c}`,
      minTempF: `${forecastDay.day.mintemp_f}`,
      maxTempF: `${forecastDay.day.maxtemp_f}`
    }));
  }
  createIcon(iconType) {
    const icon = document.createElement("span");
    icon.className = "weather-icon";
    switch (iconType) {
      case "1":
        icon.textContent = "\u{1F60A}";
        break;
      case "2":
        icon.textContent = "\u{1F610}";
        break;
      case "3":
        icon.textContent = "\u{1F637}";
        break;
      case "4":
        icon.textContent = "\u{1F637}";
        break;
      case "5":
        icon.textContent = "\u{1F628}";
        break;
      case "6":
        icon.textContent = "\u2620\uFE0F";
        break;
      default:
        icon.textContent = "";
    }
    return icon;
  }
};
var WeatherSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    if (!plugin) {
      throw new Error("Plugin is undefined");
    }
    this.plugin = plugin;
  }
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h1", { text: "Tenki" });
    new import_obsidian.Setting(containerEl).setName("API Key").setDesc(
      createFragment((fragment) => {
        fragment.append(
          "Enter your API Key",
          fragment.createEl("br"),
          fragment.createEl("a", {
            text: "Get your free key here:",
            href: "https://www.weatherapi.com/"
          })
        );
      })
    ).addText(
      (text) => text.setPlaceholder("Enter API key").setValue(this.plugin.settings.apiKey).onChange(async (value) => {
        this.plugin.settings.apiKey = value.trim();
        await this.plugin.saveSettings();
        this.plugin.view.displayTemperature();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Location").setDesc("Enter your location").addText(
      (text) => text.setPlaceholder("Enter your location").setValue(this.plugin.settings.location).onChange(
        (0, import_obsidian.debounce)(async (value) => {
          this.plugin.settings.location = value.trim();
          await this.plugin.saveSettings();
          this.plugin.view.displayTemperature();
        }, 750)
      )
    );
    new import_obsidian.Setting(containerEl).setName("Unit").setDesc("Select the unit for temperature").addDropdown(
      (dropdown) => dropdown.addOption("celsius", "Celsius").addOption("fahrenheit", "Fahrenheit").setValue(this.plugin.settings.unit).onChange(async (value) => {
        this.plugin.settings.unit = value;
        await this.plugin.saveSettings();
        this.plugin.view.displayTemperature();
      })
    );
    new import_obsidian.Setting(containerEl).setName("Refresh Interval").setDesc("Set the refresh interval in minutes").addText(
      (text) => text.setPlaceholder("Enter refresh interval").setValue(
        (this.plugin.settings.refreshInterval / 60).toString()
      ).onChange(async (value) => {
        const minutes = parseInt(value.trim());
        if (!isNaN(minutes) && minutes > 0) {
          this.plugin.settings.refreshInterval = minutes * 60;
          await this.plugin.saveSettings();
          this.plugin.clearUpdateInterval();
          this.plugin.view.displayTemperature();
          this.plugin.updateInterval = window.setInterval(
            () => this.plugin.view.displayTemperature(),
            this.plugin.settings.refreshInterval * 1e3
          );
        }
      })
    );
    const div = containerEl.createEl("div", {
      cls: "recent-files-donation"
    });
    const donateText = document.createElement("div");
    donateText.className = "donate-text";
    const donateDescription = document.createElement("p");
    donateDescription.textContent = "If you find this plugin valuable and would like to support its development, please consider using the button below. Your contribution is greatly appreciated!";
    donateText.appendChild(donateDescription);
    const donateLink = document.createElement("a");
    donateLink.href = "https://www.buymeacoffee.com/mstam30561";
    donateLink.target = "_blank";
    function rotateColorRandomly(element) {
      const rotationDegrees = Math.floor(Math.random() * 8 + 1) * 45;
      element.style.filter = `hue-rotate(${rotationDegrees}deg)`;
    }
    const donateImage = document.createElement("img");
    donateImage.src = "https://cdn.buymeacoffee.com/buttons/v2/default-blue.png";
    donateImage.alt = "Buy Me A Coffee";
    rotateColorRandomly(donateImage);
    donateImage.classList.add("donate-img");
    donateLink.appendChild(donateImage);
    donateText.appendChild(donateLink);
    div.appendChild(donateText);
  }
};
//# sourceMappingURL=data:application/json;base64,
